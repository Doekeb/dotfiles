return {}
-- return {
--   "mfussenegger/nvim-lint",
--   event = { "BufReadPre", "BufNewFile" },
--   config = function()
--     local lint = require("lint")
--     lint.linters_by_ft = {
--       python = { "mypy", "pylint", "flake8" },
--     }
--
--     local lint_augroup = vim.api.nvim_create_augroup("lint", {})
--     vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost" }, {
--       group = lint_augroup,
--       callback = function()
--         -- try_lint without arguments runs the linters defined in `linters_by_ft`
--         -- for the current filetype
--         -- require("lint").try_lint({ "flake8", "mymypy" })
--         require("lint").try_lint()
--
--         -- You can call `try_lint` with a linter name or a list of names to always
--         -- run specific linters, independent of the `linters_by_ft` configuration
--         -- require("lint").try_lint("cspell")
--       end,
--     })
--     -- vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost" }, {
--     --   group = lint_augroup,
--     --   callback = function()
--     --     -- try_lint without arguments runs the linters defined in `linters_by_ft`
--     --     -- for the current filetype
--     --     require("lint").try_lint({ "pylint", "mypy" })
--     --
--     --     -- You can call `try_lint` with a linter name or a list of names to always
--     --     -- run specific linters, independent of the `linters_by_ft` configuration
--     --     -- require("lint").try_lint("cspell")
--     --   end,
--     -- })
--     vim.keymap.set("n", "<leader>l", function()
--       lint.try_lint("")
--     end, { desc = "Trigger linting for current file" })
--   end,
-- }
